module.exports = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { pattern: peg$parsepattern },
        peg$startRuleFunction  = peg$parsepattern,

        peg$c0 = peg$FAILED,
        peg$c1 = "(",
        peg$c2 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c3 = "?<",
        peg$c4 = { type: "literal", value: "?<", description: "\"?<\"" },
        peg$c5 = ">",
        peg$c6 = { type: "literal", value: ">", description: "\">\"" },
        peg$c7 = ")",
        peg$c8 = { type: "literal", value: ")", description: "\")\"" },
        peg$c9 = function(name, matcher) { return builders.build_matcher_capture(name, matcher); },
        peg$c10 = function(expr) { return expr; },
        peg$c11 = [],
        peg$c12 = /^[a-zA-Z_0-9]/,
        peg$c13 = { type: "class", value: "[a-zA-Z_0-9]", description: "[a-zA-Z_0-9]" },
        peg$c14 = "{",
        peg$c15 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c16 = "}",
        peg$c17 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c18 = function() { return builders.build_matcher_object_any(); },
        peg$c19 = ",",
        peg$c20 = { type: "literal", value: ",", description: "\",\"" },
        peg$c21 = function(head, tail) {
                    var pairMatchers = tail.reduce(function(acc, item) {
                        return acc.concat(item[2]);
                    }, [head]);
                    return builders.build_matcher_object(pairMatchers);
                },
        peg$c22 = "[",
        peg$c23 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c24 = "]",
        peg$c25 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c26 = function() { return builders.build_matcher_list_empty(); },
        peg$c27 = "*",
        peg$c28 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c29 = function() { return builders.build_matcher_list_any(); },
        peg$c30 = function(head, tail) { return builders.build_matcher_list([head].concat(tail)); },
        peg$c31 = "<",
        peg$c32 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c33 = function() { return builders.build_matcher_iterable_any(); },
        peg$c34 = function(head, tail) {
                    var matchers = tail.reduce(function(acc, item) {
                        return acc.concat(item[2]);
                    }, [head]);
                    return builders.build_matcher_iterable(matchers);
                },
        peg$c35 = "**/",
        peg$c36 = { type: "literal", value: "**/", description: "\"**/\"" },
        peg$c37 = function(pattern) { return builders.build_matcher_descendant([pattern]); },
        peg$c38 = "*/",
        peg$c39 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c40 = function(pattern) { return builders.build_matcher_iterable([pattern]); },
        peg$c41 = "_",
        peg$c42 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c43 = function() { return builders.build_matcher_any(); },
        peg$c44 = "true",
        peg$c45 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c46 = function() { return builders.build_matcher_boolean(true); },
        peg$c47 = "false",
        peg$c48 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c49 = function() { return builders.build_matcher_boolean(false); },
        peg$c50 = "null",
        peg$c51 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c52 = function() { return builders.build_matcher_null(); },
        peg$c53 = function(number) { return builders.build_matcher_number(parseFloat(number)); },
        peg$c54 = function(string) { return builders.build_matcher_string(string); },
        peg$c55 = function(regex) { return builders.build_matcher_regex(regex); },
        peg$c56 = "!<",
        peg$c57 = { type: "literal", value: "!<", description: "\"!<\"" },
        peg$c58 = ":",
        peg$c59 = { type: "literal", value: ":", description: "\":\"" },
        peg$c60 = function(key, valueMatcher) { var keyMatcher = builders.build_matcher_string(key);
                  return builders.build_matcher_pair(keyMatcher, valueMatcher); },
        peg$c61 = function(key) { var keyMatcher = builders.build_matcher_string(key);
                  return builders.build_matcher_pair(keyMatcher, builders.build_matcher_any()); },
        peg$c62 = function(valueMatcher) { return builders.build_matcher_pair(builders.build_matcher_any(), valueMatcher); },
        peg$c63 = function(matcher) { return builders.build_matcher_find_item(matcher); },
        peg$c64 = function(matcher) { return builders.build_matcher_item(matcher); },
        peg$c65 = function() { return builders.build_matcher_item(builders.build_matcher_eol()); },
        peg$c66 = function() { return []; },
        peg$c67 = function(item, tail) { return [item].concat(tail); },
        peg$c68 = "-",
        peg$c69 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c70 = ".",
        peg$c71 = { type: "literal", value: ".", description: "\".\"" },
        peg$c72 = /^[0-9]/,
        peg$c73 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c74 = /^[1-9]/,
        peg$c75 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c76 = /^[eE]/,
        peg$c77 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c78 = null,
        peg$c79 = /^[+\-]/,
        peg$c80 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
        peg$c81 = "\"",
        peg$c82 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c83 = function(chars) { return chars; },
        peg$c84 = "#",
        peg$c85 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c86 = function(string) { return string; },
        peg$c87 = "string",
        peg$c88 = { type: "literal", value: "string", description: "\"string\"" },
        peg$c89 = "number",
        peg$c90 = { type: "literal", value: "number", description: "\"number\"" },
        peg$c91 = "boolean",
        peg$c92 = { type: "literal", value: "boolean", description: "\"boolean\"" },
        peg$c93 = "regex",
        peg$c94 = { type: "literal", value: "regex", description: "\"regex\"" },
        peg$c95 = function(chars) { return chars.join(""); },
        peg$c96 = "\\n",
        peg$c97 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
        peg$c98 = function() { return '\n'; },
        peg$c99 = "\\r",
        peg$c100 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
        peg$c101 = function() { return '\r'; },
        peg$c102 = "\\t",
        peg$c103 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
        peg$c104 = function() { return '\t'; },
        peg$c105 = "\\b",
        peg$c106 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
        peg$c107 = function() { return '\b'; },
        peg$c108 = "\\f",
        peg$c109 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
        peg$c110 = function() { return '\f'; },
        peg$c111 = "\\s",
        peg$c112 = { type: "literal", value: "\\s", description: "\"\\\\s\"" },
        peg$c113 = function() { return '\s'; },
        peg$c114 = "\\\\",
        peg$c115 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
        peg$c116 = function() { return '\\'; },
        peg$c117 = "\\\"",
        peg$c118 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
        peg$c119 = function() { return '\"'; },
        peg$c120 = void 0,
        peg$c121 = "\\",
        peg$c122 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c123 = function(char) { return char; },
        peg$c124 = { type: "any", description: "any character" },
        peg$c125 = "\\u",
        peg$c126 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
        peg$c127 = /^[0-9a-fA-F]/,
        peg$c128 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c129 = /^[ \n\t\r]/,
        peg$c130 = { type: "class", value: "[ \\n\\t\\r]", description: "[ \\n\\t\\r]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$maxFailMessage   = null,
        peg$silentFails      = 0,
        peg$userFail         = false,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      if (peg$silentFails === 0) {
        peg$expected(
          { type: "other", description: description },
          peg$reportedPos
        );
      }
      peg$userFail = true;
    }

    function error(message) {
      if (peg$silentFails === 0) {
        peg$error(message, peg$reportedPos);
      }
      peg$userFail = true;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$expected(expected, pos) {
      if (pos < peg$maxFailPos) { return; }

      if (pos > peg$maxFailPos) {
        peg$maxFailPos = pos;
        peg$maxFailExpected = [];
        peg$maxFailMessage = null;
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$error(message, pos) {
      if (pos < peg$maxFailPos) { return; }

      if (pos > peg$maxFailPos) {
        peg$maxFailPos = pos;
        peg$maxFailExpected = [];
        peg$maxFailMessage = null;
      }

      peg$maxFailMessage = message;
    }

    function peg$buildException() {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1].description === expected[i].description) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs, expectedDesc, foundDesc, i;

        switch (expected.length) {
          case 0:
            expectedDesc = "end of input";
            break;

          case 1:
            expectedDesc = expected[0].description;
            break;

          default:
            expectedDescs = new Array(expected.length);

            for (i = 0; i < expected.length; i++) {
              expectedDescs[i] = expected[i].description;
            }

            expectedDesc = expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1];
        }

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var pos        = Math.max(peg$currPos, peg$maxFailPos),
          posDetails = peg$computePosDetails(pos),
          expected   = peg$maxFailMessage === null ? peg$maxFailExpected : null,
          found      = pos < input.length ? input.charAt(pos) : null,
          message    = peg$maxFailMessage !== null
            ? peg$maxFailMessage
            : buildMessage(expected, found);

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message,
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsepattern() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parsespaces();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c1;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c2, peg$currPos); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsespaces();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c3) {
              s4 = peg$c3;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c4, peg$currPos); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsespaces();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsename();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsespaces();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                      s8 = peg$c5;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$expected(peg$c6, peg$currPos); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsespaces();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseexpr();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsespaces();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s12 = peg$c7;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$expected(peg$c8, peg$currPos); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsespaces();
                              if (s13 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                peg$userFail = false;
                                s1 = peg$c9(s6, s10);
                                if (peg$userFail) { s1 = peg$FAILED; }
                                if (s1 === peg$FAILED) {
                                  peg$currPos = s0;
                                  s0 = s1;
                                } else {
                                  s0 = s1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsespaces();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsespaces();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              peg$userFail = false;
              s1 = peg$c10(s2);
              if (peg$userFail) { s1 = peg$FAILED; }
              if (s1 === peg$FAILED) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsename() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c12.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c13, peg$currPos); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c13, peg$currPos); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseexpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c15, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespaces();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c16;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c17, peg$currPos); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c18();
            if (peg$userFail) { s1 = peg$FAILED; }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c14;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c15, peg$currPos); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsespaces();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsepair();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsespaces();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c19;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c20, peg$currPos); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsespaces();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsepair();
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c19;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$expected(peg$c20, peg$currPos); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsespaces();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsepair();
                      if (s9 !== peg$FAILED) {
                        s7 = [s7, s8, s9];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsespaces();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s7 = peg$c16;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$expected(peg$c17, peg$currPos); }
                    }
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      peg$userFail = false;
                      s1 = peg$c21(s3, s5);
                      if (peg$userFail) { s1 = peg$FAILED; }
                      if (s1 === peg$FAILED) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c22;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c23, peg$currPos); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsespaces();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c24;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$expected(peg$c25, peg$currPos); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                peg$userFail = false;
                s1 = peg$c26();
                if (peg$userFail) { s1 = peg$FAILED; }
                if (s1 === peg$FAILED) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c22;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c23, peg$currPos); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsespaces();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                  s3 = peg$c27;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c28, peg$currPos); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsespaces();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s5 = peg$c24;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$expected(peg$c25, peg$currPos); }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      peg$userFail = false;
                      s1 = peg$c29();
                      if (peg$userFail) { s1 = peg$FAILED; }
                      if (s1 === peg$FAILED) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c22;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$expected(peg$c23, peg$currPos); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsespaces();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseitem();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetail();
                    if (s4 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      peg$userFail = false;
                      s1 = peg$c30(s3, s4);
                      if (peg$userFail) { s1 = peg$FAILED; }
                      if (s1 === peg$FAILED) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 60) {
                  s1 = peg$c31;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c32, peg$currPos); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsespaces();
                  if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                      s3 = peg$c5;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$expected(peg$c6, peg$currPos); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      peg$userFail = false;
                      s1 = peg$c33();
                      if (peg$userFail) { s1 = peg$FAILED; }
                      if (s1 === peg$FAILED) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 60) {
                    s1 = peg$c31;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$expected(peg$c32, peg$currPos); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsespaces();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsepattern();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsespaces();
                        if (s4 !== peg$FAILED) {
                          s5 = [];
                          s6 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s7 = peg$c19;
                            peg$currPos++;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$expected(peg$c20, peg$currPos); }
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsespaces();
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parsepattern();
                              if (s9 !== peg$FAILED) {
                                s7 = [s7, s8, s9];
                                s6 = s7;
                              } else {
                                peg$currPos = s6;
                                s6 = peg$c0;
                              }
                            } else {
                              peg$currPos = s6;
                              s6 = peg$c0;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$c0;
                          }
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s7 = peg$c19;
                              peg$currPos++;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$expected(peg$c20, peg$currPos); }
                            }
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parsespaces();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parsepattern();
                                if (s9 !== peg$FAILED) {
                                  s7 = [s7, s8, s9];
                                  s6 = s7;
                                } else {
                                  peg$currPos = s6;
                                  s6 = peg$c0;
                                }
                              } else {
                                peg$currPos = s6;
                                s6 = peg$c0;
                              }
                            } else {
                              peg$currPos = s6;
                              s6 = peg$c0;
                            }
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsespaces();
                            if (s6 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 62) {
                                s7 = peg$c5;
                                peg$currPos++;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$expected(peg$c6, peg$currPos); }
                              }
                              if (s7 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                peg$userFail = false;
                                s1 = peg$c34(s3, s5);
                                if (peg$userFail) { s1 = peg$FAILED; }
                                if (s1 === peg$FAILED) {
                                  peg$currPos = s0;
                                  s0 = s1;
                                } else {
                                  s0 = s1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c35) {
                      s1 = peg$c35;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$expected(peg$c36, peg$currPos); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsespaces();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsepattern();
                        if (s3 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          peg$userFail = false;
                          s1 = peg$c37(s3);
                          if (peg$userFail) { s1 = peg$FAILED; }
                          if (s1 === peg$FAILED) {
                            peg$currPos = s0;
                            s0 = s1;
                          } else {
                            s0 = s1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c38) {
                        s1 = peg$c38;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$expected(peg$c39, peg$currPos); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsespaces();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsepattern();
                          if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            peg$userFail = false;
                            s1 = peg$c40(s3);
                            if (peg$userFail) { s1 = peg$FAILED; }
                            if (s1 === peg$FAILED) {
                              peg$currPos = s0;
                              s0 = s1;
                            } else {
                              s0 = s1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 95) {
                          s1 = peg$c41;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$expected(peg$c42, peg$currPos); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          peg$userFail = false;
                          s1 = peg$c43();
                          if (peg$userFail) { s1 = peg$FAILED; }
                        }
                        if (s1 === peg$FAILED) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 4) === peg$c44) {
                            s1 = peg$c44;
                            peg$currPos += 4;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$expected(peg$c45, peg$currPos); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            peg$userFail = false;
                            s1 = peg$c46();
                            if (peg$userFail) { s1 = peg$FAILED; }
                          }
                          if (s1 === peg$FAILED) {
                            peg$currPos = s0;
                            s0 = s1;
                          } else {
                            s0 = s1;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 5) === peg$c47) {
                              s1 = peg$c47;
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$expected(peg$c48, peg$currPos); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              peg$userFail = false;
                              s1 = peg$c49();
                              if (peg$userFail) { s1 = peg$FAILED; }
                            }
                            if (s1 === peg$FAILED) {
                              peg$currPos = s0;
                              s0 = s1;
                            } else {
                              s0 = s1;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 4) === peg$c50) {
                                s1 = peg$c50;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$expected(peg$c51, peg$currPos); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                peg$userFail = false;
                                s1 = peg$c52();
                                if (peg$userFail) { s1 = peg$FAILED; }
                              }
                              if (s1 === peg$FAILED) {
                                peg$currPos = s0;
                                s0 = s1;
                              } else {
                                s0 = s1;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parsenumber();
                                if (s1 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  peg$userFail = false;
                                  s1 = peg$c53(s1);
                                  if (peg$userFail) { s1 = peg$FAILED; }
                                }
                                if (s1 === peg$FAILED) {
                                  peg$currPos = s0;
                                  s0 = s1;
                                } else {
                                  s0 = s1;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parsestring();
                                  if (s1 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    peg$userFail = false;
                                    s1 = peg$c54(s1);
                                    if (peg$userFail) { s1 = peg$FAILED; }
                                  }
                                  if (s1 === peg$FAILED) {
                                    peg$currPos = s0;
                                    s0 = s1;
                                  } else {
                                    s0 = s1;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseregex();
                                    if (s1 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      peg$userFail = false;
                                      s1 = peg$c55(s1);
                                      if (peg$userFail) { s1 = peg$FAILED; }
                                    }
                                    if (s1 === peg$FAILED) {
                                      peg$currPos = s0;
                                      s0 = s1;
                                    } else {
                                      s0 = s1;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 40) {
                                        s1 = peg$c1;
                                        peg$currPos++;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$expected(peg$c2, peg$currPos); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsespaces();
                                        if (s2 !== peg$FAILED) {
                                          if (input.substr(peg$currPos, 2) === peg$c56) {
                                            s3 = peg$c56;
                                            peg$currPos += 2;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$expected(peg$c57, peg$currPos); }
                                          }
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parsespaces();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parsename();
                                              if (s5 !== peg$FAILED) {
                                                s6 = peg$parsespaces();
                                                if (s6 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 62) {
                                                    s7 = peg$c5;
                                                    peg$currPos++;
                                                  } else {
                                                    s7 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$expected(peg$c6, peg$currPos); }
                                                  }
                                                  if (s7 !== peg$FAILED) {
                                                    s8 = peg$parsespaces();
                                                    if (s8 !== peg$FAILED) {
                                                      s9 = peg$parsetype();
                                                      if (s9 !== peg$FAILED) {
                                                        s10 = peg$parsespaces();
                                                        if (s10 !== peg$FAILED) {
                                                          if (input.charCodeAt(peg$currPos) === 41) {
                                                            s11 = peg$c7;
                                                            peg$currPos++;
                                                          } else {
                                                            s11 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$expected(peg$c8, peg$currPos); }
                                                          }
                                                          if (s11 !== peg$FAILED) {
                                                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepair() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespaces();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c58;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c59, peg$currPos); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsespaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepattern();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                peg$userFail = false;
                s1 = peg$c60(s1, s5);
                if (peg$userFail) { s1 = peg$FAILED; }
                if (s1 === peg$FAILED) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsestring();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsespaces();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c58;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c59, peg$currPos); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsespaces();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s5 = peg$c41;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c42, peg$currPos); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  peg$userFail = false;
                  s1 = peg$c61(s1);
                  if (peg$userFail) { s1 = peg$FAILED; }
                  if (s1 === peg$FAILED) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s1 = peg$c41;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c42, peg$currPos); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsespaces();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s3 = peg$c58;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$expected(peg$c59, peg$currPos); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsespaces();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsepattern();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    peg$userFail = false;
                    s1 = peg$c62(s5);
                    if (peg$userFail) { s1 = peg$FAILED; }
                    if (s1 === peg$FAILED) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseitem() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c27;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c28, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespaces();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c20, peg$currPos); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsespaces();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepattern();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                peg$userFail = false;
                s1 = peg$c63(s5);
                if (peg$userFail) { s1 = peg$FAILED; }
                if (s1 === peg$FAILED) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsespaces();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepattern();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c64(s2);
            if (peg$userFail) { s1 = peg$FAILED; }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetail() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsespaces();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s2 = peg$c24;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c25, peg$currPos); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c65();
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsespaces();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c19;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c20, peg$currPos); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsespaces();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 42) {
                s4 = peg$c27;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$expected(peg$c28, peg$currPos); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsespaces();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s6 = peg$c24;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$expected(peg$c25, peg$currPos); }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    peg$userFail = false;
                    s1 = peg$c66();
                    if (peg$userFail) { s1 = peg$FAILED; }
                    if (s1 === peg$FAILED) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsespaces();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c19;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c20, peg$currPos); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsespaces();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseitem();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsetail();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    peg$userFail = false;
                    s1 = peg$c67(s4, s5);
                    if (peg$userFail) { s1 = peg$FAILED; }
                    if (s1 === peg$FAILED) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseint();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefrac();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexp();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefrac();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s1 = input.substring(s0, peg$currPos);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseint();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexp();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s1 = input.substring(s0, peg$currPos);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseint();
            if (s1 !== peg$FAILED) {
              s1 = input.substring(s0, peg$currPos);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedigit19();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedigits();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsedigit();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c68;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c69, peg$currPos); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsedigit19();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedigits();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c68;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c69, peg$currPos); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedigit();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefrac() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c70;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c71, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedigits();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexp() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsee();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedigits();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedigits() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsedigit();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsedigit();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c72.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c73, peg$currPos); }
      }

      return s0;
    }

    function peg$parsedigit19() {
      var s0;

      if (peg$c74.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c75, peg$currPos); }
      }

      return s0;
    }

    function peg$parsee() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c76.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c77, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c79.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c80, peg$currPos); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c78;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c81;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c82, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsechars();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c81;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c82, peg$currPos); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c83(s2);
            if (peg$userFail) { s1 = peg$FAILED; }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseregex() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c84;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c85, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespaces();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c86(s3);
            if (peg$userFail) { s1 = peg$FAILED; }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetype() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c87) {
        s0 = peg$c87;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c88, peg$currPos); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c89) {
          s0 = peg$c89;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c90, peg$currPos); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c91) {
            s0 = peg$c91;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c92, peg$currPos); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c93) {
              s0 = peg$c93;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c94, peg$currPos); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsechars() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsechar();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsechar();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        peg$userFail = false;
        s1 = peg$c95(s1);
        if (peg$userFail) { s1 = peg$FAILED; }
      }
      if (s1 === peg$FAILED) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsechar() {
      var s0, s1, s2;

      s0 = peg$parsecodepoint();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c96) {
          s1 = peg$c96;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c97, peg$currPos); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c98();
          if (peg$userFail) { s1 = peg$FAILED; }
        }
        if (s1 === peg$FAILED) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c99) {
            s1 = peg$c99;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c100, peg$currPos); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c101();
            if (peg$userFail) { s1 = peg$FAILED; }
          }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c102) {
              s1 = peg$c102;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c103, peg$currPos); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              peg$userFail = false;
              s1 = peg$c104();
              if (peg$userFail) { s1 = peg$FAILED; }
            }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c105) {
                s1 = peg$c105;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$expected(peg$c106, peg$currPos); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                peg$userFail = false;
                s1 = peg$c107();
                if (peg$userFail) { s1 = peg$FAILED; }
              }
              if (s1 === peg$FAILED) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c108) {
                  s1 = peg$c108;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c109, peg$currPos); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  peg$userFail = false;
                  s1 = peg$c110();
                  if (peg$userFail) { s1 = peg$FAILED; }
                }
                if (s1 === peg$FAILED) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c111) {
                    s1 = peg$c111;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$expected(peg$c112, peg$currPos); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    peg$userFail = false;
                    s1 = peg$c113();
                    if (peg$userFail) { s1 = peg$FAILED; }
                  }
                  if (s1 === peg$FAILED) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c114) {
                      s1 = peg$c114;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$expected(peg$c115, peg$currPos); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      peg$userFail = false;
                      s1 = peg$c116();
                      if (peg$userFail) { s1 = peg$FAILED; }
                    }
                    if (s1 === peg$FAILED) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c117) {
                        s1 = peg$c117;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$expected(peg$c118, peg$currPos); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        peg$userFail = false;
                        s1 = peg$c119();
                        if (peg$userFail) { s1 = peg$FAILED; }
                      }
                      if (s1 === peg$FAILED) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s2 = peg$c81;
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$expected(peg$c82, peg$currPos); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 92) {
                            s2 = peg$c121;
                            peg$currPos++;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$expected(peg$c122, peg$currPos); }
                          }
                        }
                        peg$silentFails--;
                        if (s2 === peg$FAILED) {
                          s1 = peg$c120;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c0;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseanychar();
                          if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            peg$userFail = false;
                            s1 = peg$c123(s2);
                            if (peg$userFail) { s1 = peg$FAILED; }
                            if (s1 === peg$FAILED) {
                              peg$currPos = s0;
                              s0 = s1;
                            } else {
                              s0 = s1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseanychar() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c124, peg$currPos); }
      }

      return s0;
    }

    function peg$parsecodepoint() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c125) {
        s1 = peg$c125;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c126, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsehexa();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsehexa();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsehexa();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsehexa();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehexa() {
      var s0;

      if (peg$c127.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c128, peg$currPos); }
      }

      return s0;
    }

    function peg$parsespaces() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsespace();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsespace();
      }

      return s0;
    }

    function peg$parsespace() {
      var s0;

      if (peg$c129.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c130, peg$currPos); }
      }

      return s0;
    }


        var builders = require('./builders.js');


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      throw peg$buildException();
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
